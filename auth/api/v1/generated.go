// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for AccessTokenRequestFailedResponseError.
const (
	AccessTokenRequestFailedResponseErrorInvalidGrant AccessTokenRequestFailedResponseError = "invalid_grant"

	AccessTokenRequestFailedResponseErrorInvalidRequest AccessTokenRequestFailedResponseError = "invalid_request"

	AccessTokenRequestFailedResponseErrorUnsupportedGrantType AccessTokenRequestFailedResponseError = "unsupported_grant_type"
)

// Defines values for SignSessionRequestMeans.
const (
	SignSessionRequestMeansDummy SignSessionRequestMeans = "dummy"

	SignSessionRequestMeansIrma SignSessionRequestMeans = "irma"
)

// Defines values for SignSessionResponseMeans.
const (
	SignSessionResponseMeansDummy SignSessionResponseMeans = "dummy"

	SignSessionResponseMeansIrma SignSessionResponseMeans = "irma"
)

// Error response when access token request fails as described in rfc6749 sectionn 5.2
type AccessTokenRequestFailedResponse struct {
	Error AccessTokenRequestFailedResponseError `json:"error"`

	// Human-readable ASCII text providing additional information, used to assist the client developer in understanding the error that occurred.
	ErrorDescription string `json:"error_description"`
}

// AccessTokenRequestFailedResponseError defines model for AccessTokenRequestFailedResponse.Error.
type AccessTokenRequestFailedResponseError string

// Successful response as described in rfc6749 section 5.1
type AccessTokenResponse struct {
	// The access token issued by the authorization server.
	// Could be a signed JWT or a random number. It should not have a meaning to the client.
	AccessToken string `json:"access_token"`

	// The lifetime in seconds of the access token.
	ExpiresIn int `json:"expires_in"`

	// The type of the token issued
	TokenType string `json:"token_type"`
}

// Contract defines model for Contract.
type Contract struct {
	// Language of the contract in all caps.
	Language           ContractLanguage `json:"language"`
	SignerAttributes   *[]string        `json:"signer_attributes,omitempty"`
	Template           *string          `json:"template,omitempty"`
	TemplateAttributes *[]string        `json:"template_attributes,omitempty"`

	// Type of which contract to sign.
	Type ContractType `json:"type"`

	// Version of the contract.
	Version ContractVersion `json:"version"`
}

// Language of the contract in all caps.
type ContractLanguage string

// ContractResponse defines model for ContractResponse.
type ContractResponse struct {
	// Language of the contract in all caps.
	Language ContractLanguage `json:"language"`

	// The contract message.
	Message string `json:"message"`

	// Type of which contract to sign.
	Type ContractType `json:"type"`

	// Version of the contract.
	Version ContractVersion `json:"version"`
}

// ContractSigningRequest defines model for ContractSigningRequest.
type ContractSigningRequest struct {
	// Language of the contract in all caps.
	Language ContractLanguage `json:"language"`

	// DID of the organization as registered in the Nuts registry.
	LegalEntity LegalEntity `json:"legalEntity"`

	// Type of which contract to sign.
	Type ContractType `json:"type"`

	// ValidFrom describes the time from which this contract should be considered valid
	ValidFrom *string `json:"valid_from,omitempty"`

	// ValidTo describes the time until this contract should be considered valid
	ValidTo *string `json:"valid_to,omitempty"`

	// Version of the contract.
	Version ContractVersion `json:"version"`
}

// Type of which contract to sign.
type ContractType string

// Version of the contract.
type ContractVersion string

// Request as described in RFC7523 section 2.1
type CreateAccessTokenRequest struct {
	// Base64 encoded JWT following rfc7523 and the Nuts documentation
	Assertion string `json:"assertion"`

	// always must contain the value "urn:ietf:params:oauth:grant-type:jwt-bearer"
	GrantType string `json:"grant_type"`
}

// Request for a JWT Grant. The grant can be used during a Access Token Request in the assertion field
type CreateJwtGrantRequest struct {
	Authorizer  string                 `json:"authorizer"`
	Credentials []VerifiableCredential `json:"credentials"`

	// If the signature session is completed, this property contains the signature embedded in an w3c verifiable presentation.
	Identity  *VerifiablePresentation `json:"identity,omitempty"`
	Requester string                  `json:"requester"`

	// The service for which this access-token can be used. The right oauth endpoint is selected based on the service.
	Service string `json:"service"`
}

// CredentialIssuer defines model for CredentialIssuer.
type CredentialIssuer struct {
	// a credential type
	CredentialType string `json:"credentialType"`

	// the DID of an issuer
	Issuer string `json:"issuer"`
}

// Subject of a Verifiable Credential identifying the holder and expressing claims.
type CredentialSubject map[string]interface{}

// DID according to Nuts specification
type DID string

// DrawUpContractRequest defines model for DrawUpContractRequest.
type DrawUpContractRequest struct {
	// Language of the contract in all caps.
	Language ContractLanguage `json:"language"`

	// DID of the organization as registered in the Nuts registry.
	LegalEntity LegalEntity `json:"legalEntity"`

	// Type of which contract to sign.
	Type ContractType `json:"type"`

	// The duration this contract is valid, starting from validFrom or current time if validFrom is omitted. Uses this node default when omitted. Valid time units are: 's', 'm', 'h'
	ValidDuration *string `json:"validDuration,omitempty"`

	// validFrom describes the time from which this contract should be considered valid. Current time is used when omitted.
	ValidFrom *string `json:"validFrom,omitempty"`

	// Version of the contract.
	Version ContractVersion `json:"version"`
}

// Response with a JWT Grant. It contains a JWT, signed with the private key of the requestor software vendor.
type JwtGrantResponse struct {
	// The URL that corresponds to the oauth endpoint of the selected service.
	AuthorizationServerEndpoint string `json:"authorization_server_endpoint"`
	BearerToken                 string `json:"bearer_token"`
}

// DID of the organization as registered in the Nuts registry.
type LegalEntity string

// Request for a JWT Grant and use it as authorization grant to get the access token from the authorizer
type RequestAccessTokenRequest struct {
	Authorizer  string                 `json:"authorizer"`
	Credentials []VerifiableCredential `json:"credentials"`

	// If the signature session is completed, this property contains the signature embedded in an w3c verifiable presentation.
	Identity  *VerifiablePresentation `json:"identity,omitempty"`
	Requester string                  `json:"requester"`

	// The service for which this access-token can be used. The right oauth endpoint is selected based on the service.
	Service string `json:"service"`
}

// SignSessionRequest defines model for SignSessionRequest.
type SignSessionRequest struct {
	Means SignSessionRequestMeans `json:"means"`

	// Params are passed to the means. Should be documented in the means documentation.
	Params map[string]interface{} `json:"params"`

	// Base64 encoded payload what needs to be signed.
	Payload string `json:"payload"`
}

// SignSessionRequestMeans defines model for SignSessionRequest.Means.
type SignSessionRequestMeans string

// SignSessionResponse defines model for SignSessionResponse.
type SignSessionResponse struct {
	// The means this session uses to sign.
	Means SignSessionResponseMeans `json:"means"`

	// Unique identifier of this sign session.
	SessionID string `json:"sessionID"`

	// A pointer to a sign session. This is an opaque value which only has meaning in the context of the signing means. Can be an URL, base64 encoded image of a QRCode etc.
	SessionPtr map[string]interface{} `json:"sessionPtr"`
}

// The means this session uses to sign.
type SignSessionResponseMeans string

// SignSessionStatusResponse defines model for SignSessionStatusResponse.
type SignSessionStatusResponse struct {
	// Status indicates the status of the signing proces. Values depend on the implementation of the signing means.
	Status string `json:"status"`

	// If the signature session is completed, this property contains the signature embedded in an w3c verifiable presentation.
	VerifiablePresentation *VerifiablePresentation `json:"verifiablePresentation,omitempty"`
}

// SignatureVerificationRequest defines model for SignatureVerificationRequest.
type SignatureVerificationRequest struct {
	// If the signature session is completed, this property contains the signature embedded in an w3c verifiable presentation.
	VerifiablePresentation VerifiablePresentation `json:"VerifiablePresentation"`

	// Moment in time to check the validity of the signature. If omitted, the current time is used.
	CheckTime *string `json:"checkTime,omitempty"`
}

// Contains the signature verification result.
type SignatureVerificationResponse struct {
	// Key value pairs containing claims and their values.
	Credentials *map[string]interface{} `json:"credentials,omitempty"`

	// Key vale pairs containing the attributes of the issuer.
	IssuerAttributes *map[string]interface{} `json:"issuerAttributes,omitempty"`

	// Indicates the validity of the signature.
	Validity bool `json:"validity"`

	// Type of Verifiable credential.
	VpType *string `json:"vpType,omitempty"`
}

// Token introspection request as described in RFC7662 section 2.1
type TokenIntrospectionRequest struct {
	Token string `json:"token"`
}

// Token introspection response as described in RFC7662 section 2.2
type TokenIntrospectionResponse struct {
	// True if the token is active, false if the token is expired, malformed etc.
	Active bool `json:"active"`

	// As per rfc7523 https://tools.ietf.org/html/rfc7523>, the aud must be the
	// token endpoint. This can be taken from the Nuts registry.
	Aud *string `json:"aud,omitempty"`

	// End-User's preferred e-mail address. Should be a personal email and can be used to uniquely identify a user. Just like the email used for an account.
	Email *string `json:"email,omitempty"`
	Exp   *int    `json:"exp,omitempty"`

	// Surname(s) or last name(s) of the End-User.
	FamilyName *string `json:"family_name,omitempty"`
	Iat        *int    `json:"iat,omitempty"`

	// Initials of the End-User.
	Initials *string `json:"initials,omitempty"`

	// The subject (not a Nuts subject) contains the DID of the authorizer.
	Iss *string `json:"iss,omitempty"`

	// encoded ops signature. (TBD)
	Osi *string `json:"osi,omitempty"`

	// Surname prefix
	Prefix *string `json:"prefix,omitempty"`

	// credentials resolved from `vcs` (VC IDs). It contains only those VCs that could be resolved.
	ResolvedVCs *[]VerifiableCredential `json:"resolvedVCs,omitempty"`
	Service     *string                 `json:"service,omitempty"`

	// The subject is always the acting party, thus the care organization requesting access to data.
	Sub *string   `json:"sub,omitempty"`
	Vcs *[]string `json:"vcs,omitempty"`
}

// VerifyAccessTokenParams defines parameters for VerifyAccessToken.
type VerifyAccessTokenParams struct {
	Authorization string `json:"Authorization"`
}

// DrawUpContractJSONBody defines parameters for DrawUpContract.
type DrawUpContractJSONBody DrawUpContractRequest

// CreateJwtGrantJSONBody defines parameters for CreateJwtGrant.
type CreateJwtGrantJSONBody CreateJwtGrantRequest

// RequestAccessTokenJSONBody defines parameters for RequestAccessToken.
type RequestAccessTokenJSONBody RequestAccessTokenRequest

// CreateSignSessionJSONBody defines parameters for CreateSignSession.
type CreateSignSessionJSONBody SignSessionRequest

// VerifySignatureJSONBody defines parameters for VerifySignature.
type VerifySignatureJSONBody SignatureVerificationRequest

// GetContractByTypeParams defines parameters for GetContractByType.
type GetContractByTypeParams struct {
	// The version of this contract. If omitted, the most recent version will be returned
	Version  *string `json:"version,omitempty"`
	Language *string `json:"language,omitempty"`
}

// DrawUpContractJSONRequestBody defines body for DrawUpContract for application/json ContentType.
type DrawUpContractJSONRequestBody DrawUpContractJSONBody

// CreateJwtGrantJSONRequestBody defines body for CreateJwtGrant for application/json ContentType.
type CreateJwtGrantJSONRequestBody CreateJwtGrantJSONBody

// RequestAccessTokenJSONRequestBody defines body for RequestAccessToken for application/json ContentType.
type RequestAccessTokenJSONRequestBody RequestAccessTokenJSONBody

// CreateSignSessionJSONRequestBody defines body for CreateSignSession for application/json ContentType.
type CreateSignSessionJSONRequestBody CreateSignSessionJSONBody

// VerifySignatureJSONRequestBody defines body for VerifySignature for application/json ContentType.
type VerifySignatureJSONRequestBody VerifySignatureJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// IntrospectAccessToken request with any body
	IntrospectAccessTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyAccessToken request
	VerifyAccessToken(ctx context.Context, params *VerifyAccessTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DrawUpContract request with any body
	DrawUpContractWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DrawUpContract(ctx context.Context, body DrawUpContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateJwtGrant request with any body
	CreateJwtGrantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateJwtGrant(ctx context.Context, body CreateJwtGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RequestAccessToken request with any body
	RequestAccessTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestAccessToken(ctx context.Context, body RequestAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSignSession request with any body
	CreateSignSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSignSession(ctx context.Context, body CreateSignSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSignSessionStatus request
	GetSignSessionStatus(ctx context.Context, sessionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifySignature request with any body
	VerifySignatureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifySignature(ctx context.Context, body VerifySignatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccessToken request with any body
	CreateAccessTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContractByType request
	GetContractByType(ctx context.Context, contractType string, params *GetContractByTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) IntrospectAccessTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntrospectAccessTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyAccessToken(ctx context.Context, params *VerifyAccessTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyAccessTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DrawUpContractWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDrawUpContractRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DrawUpContract(ctx context.Context, body DrawUpContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDrawUpContractRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJwtGrantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJwtGrantRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJwtGrant(ctx context.Context, body CreateJwtGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJwtGrantRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestAccessTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestAccessTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestAccessToken(ctx context.Context, body RequestAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestAccessTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSignSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSignSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSignSession(ctx context.Context, body CreateSignSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSignSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSignSessionStatus(ctx context.Context, sessionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSignSessionStatusRequest(c.Server, sessionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifySignatureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifySignatureRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifySignature(ctx context.Context, body VerifySignatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifySignatureRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccessTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccessTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContractByType(ctx context.Context, contractType string, params *GetContractByTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractByTypeRequest(c.Server, contractType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewIntrospectAccessTokenRequestWithBody generates requests for IntrospectAccessToken with any type of body
func NewIntrospectAccessTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/auth/v1/accesstoken/introspect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyAccessTokenRequest generates requests for VerifyAccessToken
func NewVerifyAccessTokenRequest(server string, params *VerifyAccessTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/auth/v1/accesstoken/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", headerParam0)

	return req, nil
}

// NewDrawUpContractRequest calls the generic DrawUpContract builder with application/json body
func NewDrawUpContractRequest(server string, body DrawUpContractJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDrawUpContractRequestWithBody(server, "application/json", bodyReader)
}

// NewDrawUpContractRequestWithBody generates requests for DrawUpContract with any type of body
func NewDrawUpContractRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/auth/v1/contract/drawup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateJwtGrantRequest calls the generic CreateJwtGrant builder with application/json body
func NewCreateJwtGrantRequest(server string, body CreateJwtGrantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateJwtGrantRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateJwtGrantRequestWithBody generates requests for CreateJwtGrant with any type of body
func NewCreateJwtGrantRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/auth/v1/jwt-grant")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRequestAccessTokenRequest calls the generic RequestAccessToken builder with application/json body
func NewRequestAccessTokenRequest(server string, body RequestAccessTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestAccessTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewRequestAccessTokenRequestWithBody generates requests for RequestAccessToken with any type of body
func NewRequestAccessTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/auth/v1/request-access-token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSignSessionRequest calls the generic CreateSignSession builder with application/json body
func NewCreateSignSessionRequest(server string, body CreateSignSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSignSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSignSessionRequestWithBody generates requests for CreateSignSession with any type of body
func NewCreateSignSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/auth/v1/signature/session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSignSessionStatusRequest generates requests for GetSignSessionStatus
func NewGetSignSessionStatusRequest(server string, sessionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sessionID", runtime.ParamLocationPath, sessionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/auth/v1/signature/session/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVerifySignatureRequest calls the generic VerifySignature builder with application/json body
func NewVerifySignatureRequest(server string, body VerifySignatureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifySignatureRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifySignatureRequestWithBody generates requests for VerifySignature with any type of body
func NewVerifySignatureRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/auth/v1/signature/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAccessTokenRequestWithBody generates requests for CreateAccessToken with any type of body
func NewCreateAccessTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/n2n/auth/v1/accesstoken")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContractByTypeRequest generates requests for GetContractByType
func NewGetContractByTypeRequest(server string, contractType string, params *GetContractByTypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractType", runtime.ParamLocationPath, contractType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/auth/v1/contract/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Language != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// IntrospectAccessToken request with any body
	IntrospectAccessTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntrospectAccessTokenResponse, error)

	// VerifyAccessToken request
	VerifyAccessTokenWithResponse(ctx context.Context, params *VerifyAccessTokenParams, reqEditors ...RequestEditorFn) (*VerifyAccessTokenResponse, error)

	// DrawUpContract request with any body
	DrawUpContractWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DrawUpContractResponse, error)

	DrawUpContractWithResponse(ctx context.Context, body DrawUpContractJSONRequestBody, reqEditors ...RequestEditorFn) (*DrawUpContractResponse, error)

	// CreateJwtGrant request with any body
	CreateJwtGrantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJwtGrantResponse, error)

	CreateJwtGrantWithResponse(ctx context.Context, body CreateJwtGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJwtGrantResponse, error)

	// RequestAccessToken request with any body
	RequestAccessTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestAccessTokenResponse, error)

	RequestAccessTokenWithResponse(ctx context.Context, body RequestAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestAccessTokenResponse, error)

	// CreateSignSession request with any body
	CreateSignSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSignSessionResponse, error)

	CreateSignSessionWithResponse(ctx context.Context, body CreateSignSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSignSessionResponse, error)

	// GetSignSessionStatus request
	GetSignSessionStatusWithResponse(ctx context.Context, sessionID string, reqEditors ...RequestEditorFn) (*GetSignSessionStatusResponse, error)

	// VerifySignature request with any body
	VerifySignatureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifySignatureResponse, error)

	VerifySignatureWithResponse(ctx context.Context, body VerifySignatureJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifySignatureResponse, error)

	// CreateAccessToken request with any body
	CreateAccessTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccessTokenResponse, error)

	// GetContractByType request
	GetContractByTypeWithResponse(ctx context.Context, contractType string, params *GetContractByTypeParams, reqEditors ...RequestEditorFn) (*GetContractByTypeResponse, error)
}

type IntrospectAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenIntrospectionResponse
}

// Status returns HTTPResponse.Status
func (r IntrospectAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntrospectAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VerifyAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DrawUpContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContractResponse
}

// Status returns HTTPResponse.Status
func (r DrawUpContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DrawUpContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateJwtGrantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JwtGrantResponse
}

// Status returns HTTPResponse.Status
func (r CreateJwtGrantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateJwtGrantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RequestAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessTokenResponse
}

// Status returns HTTPResponse.Status
func (r RequestAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSignSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SignSessionResponse
}

// Status returns HTTPResponse.Status
func (r CreateSignSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSignSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSignSessionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SignSessionStatusResponse
}

// Status returns HTTPResponse.Status
func (r GetSignSessionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSignSessionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifySignatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SignatureVerificationResponse
}

// Status returns HTTPResponse.Status
func (r VerifySignatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifySignatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessTokenResponse
	JSON400      *AccessTokenRequestFailedResponse
}

// Status returns HTTPResponse.Status
func (r CreateAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractByTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contract
}

// Status returns HTTPResponse.Status
func (r GetContractByTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractByTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// IntrospectAccessTokenWithBodyWithResponse request with arbitrary body returning *IntrospectAccessTokenResponse
func (c *ClientWithResponses) IntrospectAccessTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntrospectAccessTokenResponse, error) {
	rsp, err := c.IntrospectAccessTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntrospectAccessTokenResponse(rsp)
}

// VerifyAccessTokenWithResponse request returning *VerifyAccessTokenResponse
func (c *ClientWithResponses) VerifyAccessTokenWithResponse(ctx context.Context, params *VerifyAccessTokenParams, reqEditors ...RequestEditorFn) (*VerifyAccessTokenResponse, error) {
	rsp, err := c.VerifyAccessToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyAccessTokenResponse(rsp)
}

// DrawUpContractWithBodyWithResponse request with arbitrary body returning *DrawUpContractResponse
func (c *ClientWithResponses) DrawUpContractWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DrawUpContractResponse, error) {
	rsp, err := c.DrawUpContractWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDrawUpContractResponse(rsp)
}

func (c *ClientWithResponses) DrawUpContractWithResponse(ctx context.Context, body DrawUpContractJSONRequestBody, reqEditors ...RequestEditorFn) (*DrawUpContractResponse, error) {
	rsp, err := c.DrawUpContract(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDrawUpContractResponse(rsp)
}

// CreateJwtGrantWithBodyWithResponse request with arbitrary body returning *CreateJwtGrantResponse
func (c *ClientWithResponses) CreateJwtGrantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJwtGrantResponse, error) {
	rsp, err := c.CreateJwtGrantWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJwtGrantResponse(rsp)
}

func (c *ClientWithResponses) CreateJwtGrantWithResponse(ctx context.Context, body CreateJwtGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJwtGrantResponse, error) {
	rsp, err := c.CreateJwtGrant(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJwtGrantResponse(rsp)
}

// RequestAccessTokenWithBodyWithResponse request with arbitrary body returning *RequestAccessTokenResponse
func (c *ClientWithResponses) RequestAccessTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestAccessTokenResponse, error) {
	rsp, err := c.RequestAccessTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestAccessTokenResponse(rsp)
}

func (c *ClientWithResponses) RequestAccessTokenWithResponse(ctx context.Context, body RequestAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestAccessTokenResponse, error) {
	rsp, err := c.RequestAccessToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestAccessTokenResponse(rsp)
}

// CreateSignSessionWithBodyWithResponse request with arbitrary body returning *CreateSignSessionResponse
func (c *ClientWithResponses) CreateSignSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSignSessionResponse, error) {
	rsp, err := c.CreateSignSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSignSessionResponse(rsp)
}

func (c *ClientWithResponses) CreateSignSessionWithResponse(ctx context.Context, body CreateSignSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSignSessionResponse, error) {
	rsp, err := c.CreateSignSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSignSessionResponse(rsp)
}

// GetSignSessionStatusWithResponse request returning *GetSignSessionStatusResponse
func (c *ClientWithResponses) GetSignSessionStatusWithResponse(ctx context.Context, sessionID string, reqEditors ...RequestEditorFn) (*GetSignSessionStatusResponse, error) {
	rsp, err := c.GetSignSessionStatus(ctx, sessionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSignSessionStatusResponse(rsp)
}

// VerifySignatureWithBodyWithResponse request with arbitrary body returning *VerifySignatureResponse
func (c *ClientWithResponses) VerifySignatureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifySignatureResponse, error) {
	rsp, err := c.VerifySignatureWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifySignatureResponse(rsp)
}

func (c *ClientWithResponses) VerifySignatureWithResponse(ctx context.Context, body VerifySignatureJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifySignatureResponse, error) {
	rsp, err := c.VerifySignature(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifySignatureResponse(rsp)
}

// CreateAccessTokenWithBodyWithResponse request with arbitrary body returning *CreateAccessTokenResponse
func (c *ClientWithResponses) CreateAccessTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccessTokenResponse, error) {
	rsp, err := c.CreateAccessTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccessTokenResponse(rsp)
}

// GetContractByTypeWithResponse request returning *GetContractByTypeResponse
func (c *ClientWithResponses) GetContractByTypeWithResponse(ctx context.Context, contractType string, params *GetContractByTypeParams, reqEditors ...RequestEditorFn) (*GetContractByTypeResponse, error) {
	rsp, err := c.GetContractByType(ctx, contractType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractByTypeResponse(rsp)
}

// ParseIntrospectAccessTokenResponse parses an HTTP response from a IntrospectAccessTokenWithResponse call
func ParseIntrospectAccessTokenResponse(rsp *http.Response) (*IntrospectAccessTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntrospectAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenIntrospectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVerifyAccessTokenResponse parses an HTTP response from a VerifyAccessTokenWithResponse call
func ParseVerifyAccessTokenResponse(rsp *http.Response) (*VerifyAccessTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDrawUpContractResponse parses an HTTP response from a DrawUpContractWithResponse call
func ParseDrawUpContractResponse(rsp *http.Response) (*DrawUpContractResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DrawUpContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContractResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateJwtGrantResponse parses an HTTP response from a CreateJwtGrantWithResponse call
func ParseCreateJwtGrantResponse(rsp *http.Response) (*CreateJwtGrantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateJwtGrantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JwtGrantResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRequestAccessTokenResponse parses an HTTP response from a RequestAccessTokenWithResponse call
func ParseRequestAccessTokenResponse(rsp *http.Response) (*RequestAccessTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSignSessionResponse parses an HTTP response from a CreateSignSessionWithResponse call
func ParseCreateSignSessionResponse(rsp *http.Response) (*CreateSignSessionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSignSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SignSessionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetSignSessionStatusResponse parses an HTTP response from a GetSignSessionStatusWithResponse call
func ParseGetSignSessionStatusResponse(rsp *http.Response) (*GetSignSessionStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSignSessionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SignSessionStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVerifySignatureResponse parses an HTTP response from a VerifySignatureWithResponse call
func ParseVerifySignatureResponse(rsp *http.Response) (*VerifySignatureResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifySignatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SignatureVerificationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAccessTokenResponse parses an HTTP response from a CreateAccessTokenWithResponse call
func ParseCreateAccessTokenResponse(rsp *http.Response) (*CreateAccessTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest AccessTokenRequestFailedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetContractByTypeResponse parses an HTTP response from a GetContractByTypeWithResponse call
func ParseGetContractByTypeResponse(rsp *http.Response) (*GetContractByTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractByTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contract
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Introspection endpoint to retrieve information from an Access Token as described by RFC7662
	// (POST /internal/auth/v1/accesstoken/introspect)
	IntrospectAccessToken(ctx echo.Context) error
	// Verifies the provided access token
	// (HEAD /internal/auth/v1/accesstoken/verify)
	VerifyAccessToken(ctx echo.Context, params VerifyAccessTokenParams) error
	// Draw up a contract using a specified contract template, language and version
	// (PUT /internal/auth/v1/contract/drawup)
	DrawUpContract(ctx echo.Context) error
	// Create a JWT Grant
	// (POST /internal/auth/v1/jwt-grant)
	CreateJwtGrant(ctx echo.Context) error
	// Request an accesstoken from the authorizer
	// (POST /internal/auth/v1/request-access-token)
	RequestAccessToken(ctx echo.Context) error
	// Create a signing session for a supported means.
	// (POST /internal/auth/v1/signature/session)
	CreateSignSession(ctx echo.Context) error
	// Get the current status of a signing session
	// (GET /internal/auth/v1/signature/session/{sessionID})
	GetSignSessionStatus(ctx echo.Context, sessionID string) error
	// Verify a signature in the form of a verifiable presentation
	// (PUT /internal/auth/v1/signature/verify)
	VerifySignature(ctx echo.Context) error
	// Create an access token using a JWT as authorization grant
	// (POST /n2n/auth/v1/accesstoken)
	CreateAccessToken(ctx echo.Context) error
	// Get a contract by type and version
	// (GET /public/auth/v1/contract/{contractType})
	GetContractByType(ctx echo.Context, contractType string, params GetContractByTypeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// IntrospectAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) IntrospectAccessToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IntrospectAccessToken(ctx)
	return err
}

// VerifyAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) VerifyAccessToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyAccessTokenParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VerifyAccessToken(ctx, params)
	return err
}

// DrawUpContract converts echo context to params.
func (w *ServerInterfaceWrapper) DrawUpContract(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DrawUpContract(ctx)
	return err
}

// CreateJwtGrant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateJwtGrant(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateJwtGrant(ctx)
	return err
}

// RequestAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) RequestAccessToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestAccessToken(ctx)
	return err
}

// CreateSignSession converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSignSession(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSignSession(ctx)
	return err
}

// GetSignSessionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetSignSessionStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionID" -------------
	var sessionID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sessionID", runtime.ParamLocationPath, ctx.Param("sessionID"), &sessionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSignSessionStatus(ctx, sessionID)
	return err
}

// VerifySignature converts echo context to params.
func (w *ServerInterfaceWrapper) VerifySignature(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VerifySignature(ctx)
	return err
}

// CreateAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccessToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccessToken(ctx)
	return err
}

// GetContractByType converts echo context to params.
func (w *ServerInterfaceWrapper) GetContractByType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contractType" -------------
	var contractType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "contractType", runtime.ParamLocationPath, ctx.Param("contractType"), &contractType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contractType: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContractByTypeParams
	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContractByType(ctx, contractType, params)
	return err
}

// PATCH: This template file was taken from pkg/codegen/templates/echo/echo-register.tmpl

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

type Preprocessor interface {
	Preprocess(operationID string, context echo.Context)
}

type ErrorStatusCodeResolver interface {
	ResolveStatusCode(err error) int
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	// PATCH: This alteration wraps the call to the implementation in a function that sets the "OperationId" context parameter,
	// so it can be used in error reporting middleware.
	router.POST(baseURL+"/internal/auth/v1/accesstoken/introspect", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("IntrospectAccessToken", context)
		return wrapper.IntrospectAccessToken(context)
	})
	router.HEAD(baseURL+"/internal/auth/v1/accesstoken/verify", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("VerifyAccessToken", context)
		return wrapper.VerifyAccessToken(context)
	})
	router.PUT(baseURL+"/internal/auth/v1/contract/drawup", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("DrawUpContract", context)
		return wrapper.DrawUpContract(context)
	})
	router.POST(baseURL+"/internal/auth/v1/jwt-grant", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("CreateJwtGrant", context)
		return wrapper.CreateJwtGrant(context)
	})
	router.POST(baseURL+"/internal/auth/v1/request-access-token", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("RequestAccessToken", context)
		return wrapper.RequestAccessToken(context)
	})
	router.POST(baseURL+"/internal/auth/v1/signature/session", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("CreateSignSession", context)
		return wrapper.CreateSignSession(context)
	})
	router.GET(baseURL+"/internal/auth/v1/signature/session/:sessionID", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("GetSignSessionStatus", context)
		return wrapper.GetSignSessionStatus(context)
	})
	router.PUT(baseURL+"/internal/auth/v1/signature/verify", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("VerifySignature", context)
		return wrapper.VerifySignature(context)
	})
	router.POST(baseURL+"/n2n/auth/v1/accesstoken", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("CreateAccessToken", context)
		return wrapper.CreateAccessToken(context)
	})
	router.GET(baseURL+"/public/auth/v1/contract/:contractType", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("GetContractByType", context)
		return wrapper.GetContractByType(context)
	})

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
